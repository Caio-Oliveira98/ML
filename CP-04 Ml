{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNWzSfcRn/2o35eOnyOSE24",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Caio-Oliveira98/ML/blob/main/CP-04%20Ml\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Resolução do Checkpoint 04 - Machine Learning\n",
        "\n",
        "# **Objetivo:**\n",
        " Este notebook tem como objetivo resolver o Checkpoint 04 da matéria de Machine Learning,\n",
        " utilizando o algoritmo Random Forest para regressão, conforme especificado no PDF."
      ],
      "metadata": {
        "id": "VkRuTdol86u4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Passos:**\n",
        "# 1.  Entendimento do Problema\n",
        "# 2.  Coleta de Dados (com a base de dados 'autos.csv')\n",
        "# 3.  Análise e Limpeza de dados\n",
        "# 4.  Engenharia de Features\n",
        "# 5.  Modelagem com Random Forest\n",
        "# 6.  Avaliação do Modelo\n",
        "# 7.  Conclusão\n"
      ],
      "metadata": {
        "id": "p5B9kwp39Crc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  1. Entendimento do Problema\n",
        "\n",
        "# **Objetivo Geral:**\n",
        " Criar um modelo de Machine Learning capaz de prever o preço de veículos usados com base em\n",
        " suas características.\n",
        "\n",
        "# **Por que isso é importante?**\n",
        " Prever o preço de um veículo usado é útil para:\n",
        " - Compradores: Saber se estão pagando um preço justo.\n",
        " - Vendedores: Definir um preço competitivo para vender mais rápido.\n",
        " - Empresas: Avaliar o valor de seus ativos (frota de veículos, etc.).\n",
        "\n",
        "# **Algoritmo:**\n",
        " Utilizaremos o Random Forest, um algoritmo de aprendizado de máquina que combina várias\n",
        " árvores de decisão para fazer previsões mais precisas e robustas.\n",
        "\n",
        "# **Dataset:**\n",
        " O dataset a ser utilizado é o 'autos.csv', que contém informações sobre veículos usados\n",
        " (marca, modelo, ano, quilometragem, etc.).\n",
        "\n",
        "# **Variáveis:**\n",
        " As variáveis disponíveis no dataset são:\n",
        " 1. DateCrawled: data rastreada (data em que o anúncio foi coletado)\n",
        " 2. Name: nome do anúncio\n",
        " 3. seller: tipo de vendedor (privado ou comercial)\n",
        " 4. offerType: tipo de oferta (leilão, venda direta, etc.)\n",
        " 5. Price (target): preço do veículo (o que queremos prever)\n",
        " 6. abtest: se o anúncio participou de um teste A/B\n",
        " 7. vehicleType: tipo de veículo (carro, moto, caminhão, etc.)\n",
        " 8. yearOfRegistration: ano de registro do veículo\n",
        " 9. gearbox: tipo de câmbio (manual ou automático)\n",
        " 10. powerPS: potência do motor em cavalos (PS)\n",
        " 11. model: modelo do veículo\n",
        " 12. kilometer: quilometragem percorrida\n",
        " 13. monthOfRegistration: mês de registro do veículo\n",
        " 14. fuelType: tipo de combustível\n",
        " 15. brand: marca do veículo\n",
        " 16. notRepairedDamage: se o veículo possui danos não reparados\n",
        " 17. dateCreated: data de criação do anúncio\n",
        " 18. nrOfPictures: número de fotos no anúncio\n",
        " 19. postalCode: código postal do anunciante\n",
        " 20. lastSeen: data da última vez em que o anúncio foi visto\n",
        "\n",
        "# **Métrica de Avaliação:**\n",
        " Mean Absolute Error (MAE): Mede a diferença média absoluta entre os valores previstos pelo\n",
        " Modelo e os valores reais. Quanto menor o MAE, melhor o modelo.\n"
      ],
      "metadata": {
        "id": "Y64FsmV69IZ2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  2. Coleta de Dados\n",
        "\n",
        "# **Objetivo:**\n",
        " Importar as bibliotecas necessárias e carregar o dataset 'autos.csv' para análise.\n",
        "\n",
        "# **Bibliotecas:**\n",
        " - pandas: Para manipulação e análise de dados tabulares (como tabelas).\n",
        " - numpy: Para operações numéricas eficientes (cálculos matemáticos).\n",
        " - matplotlib.pyplot: Para criação de gráficos e visualizações.\n",
        " - seaborn: Para criação de gráficos estatísticos mais atraentes.\n",
        " - sklearn.model_selection: Para dividir os dados em conjuntos de treinamento e teste, e para\n",
        "   otimizar os hiperparâmetros do modelo.\n",
        " - sklearn.preprocessing: Para pré-processar os dados (transformar variáveis, etc.).\n",
        " - sklearn.impute: Para lidar com valores ausentes nos dados.\n",
        " - sklearn.ensemble: Para utilizar o modelo Random Forest para regressão.\n",
        " - sklearn.metrics: Para calcular métricas de avaliação do modelo (como o MAE).\n",
        " - datetime: Para trabalhar com datas e horários.\n",
        "\n"
      ],
      "metadata": {
        "id": "EC5dO0-G9fyp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importação das bibliotecas\n",
        "import pandas as pd  # Manipulação e análise de dados tabulares\n",
        "import numpy as np  # Operações numéricas\n",
        "import matplotlib.pyplot as plt  # Criação de gráficos e visualizações\n",
        "import seaborn as sns  # Criação de gráficos estatísticos mais atraentes\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV  # Divisão dos dados e otimização de hiperparâmetros\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder  # Pré-processamento dos dados\n",
        "from sklearn.impute import SimpleImputer  # Imputação de valores ausentes\n",
        "from sklearn.ensemble import RandomForestRegressor  # Modelo Random Forest para regressão\n",
        "from sklearn.metrics import mean_absolute_error  # Métrica de avaliação do modelo\n",
        "import datetime  # Manipulação de datas\n",
        "from datetime import datetime  # Manipulação de datas"
      ],
      "metadata": {
        "id": "Yp9A3pmx9eO9"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregando o dataset 'autos.csv'\n",
        "\n",
        "# Explicação:\n",
        "# - pd.read_csv(): Função do pandas para ler arquivos CSV (arquivos de tabela).\n",
        "# - 'autos.csv': Nome do arquivo a ser lido.\n",
        "# - encoding='ISO-8859-1': Especifica a codificação dos caracteres do arquivo. Isso é importante\n",
        "#   para garantir que caracteres especiais (como letras acentuadas) sejam lidos corretamente.\n",
        "df = pd.read_csv('autos.csv', encoding='ISO-8859-1')"
      ],
      "metadata": {
        "id": "Hu3bO5Py9vDe"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Exibindo as primeiras linhas do dataset para verificar se o carregamento foi bem-sucedido\n",
        "# Explicação:\n",
        "# - df.head(): Função do pandas para exibir as primeiras linhas do DataFrame (tabela).\n",
        "#   Por padrão, exibe as 5 primeiras linhas.\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nsRCMm1H-AOP",
        "outputId": "f633a053-224e-48f0-8784-ccf681c7e6ba"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           dateCrawled                            name  seller offerType  \\\n",
            "0  2016-03-24 11:52:17                      Golf_3_1.6  privat   Angebot   \n",
            "1  2016-03-24 10:58:45            A5_Sportback_2.7_Tdi  privat   Angebot   \n",
            "2  2016-03-14 12:52:21  Jeep_Grand_Cherokee_\"Overland\"  privat   Angebot   \n",
            "3  2016-03-17 16:54:04              GOLF_4_1_4__3TÜRER  privat   Angebot   \n",
            "4  2016-03-31 17:25:20  Skoda_Fabia_1.4_TDI_PD_Classic  privat   Angebot   \n",
            "\n",
            "   price abtest vehicleType  yearOfRegistration    gearbox  powerPS  model  \\\n",
            "0    480   test         NaN                1993    manuell        0   golf   \n",
            "1  18300   test       coupe                2011    manuell      190    NaN   \n",
            "2   9800   test         suv                2004  automatik      163  grand   \n",
            "3   1500   test  kleinwagen                2001    manuell       75   golf   \n",
            "4   3600   test  kleinwagen                2008    manuell       69  fabia   \n",
            "\n",
            "   kilometer  monthOfRegistration fuelType       brand notRepairedDamage  \\\n",
            "0     150000                    0   benzin  volkswagen               NaN   \n",
            "1     125000                    5   diesel        audi                ja   \n",
            "2     125000                    8   diesel        jeep               NaN   \n",
            "3     150000                    6   benzin  volkswagen              nein   \n",
            "4      90000                    7   diesel       skoda              nein   \n",
            "\n",
            "           dateCreated  nrOfPictures  postalCode             lastSeen  \n",
            "0  2016-03-24 00:00:00             0       70435  2016-04-07 03:16:57  \n",
            "1  2016-03-24 00:00:00             0       66954  2016-04-07 01:46:50  \n",
            "2  2016-03-14 00:00:00             0       90480  2016-04-05 12:47:46  \n",
            "3  2016-03-17 00:00:00             0       91074  2016-03-17 17:40:17  \n",
            "4  2016-03-31 00:00:00             0       60437  2016-04-06 10:17:21  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  3. Análise de Dados e Limpeza\n",
        "\n",
        "# **Objetivo:**\n",
        " Realizar uma análise exploratória dos dados para entender melhor as relações entre as\n",
        " variáveis, tratar valores ausentes e remover colunas desnecessárias para preparar o dataset\n",
        " para a modelagem.\n",
        "\n",
        "# **Análise Exploratória:**\n",
        " - Verificar os tipos de dados de cada coluna.\n",
        " - Calcular estatísticas descritivas (média, mediana, desvio padrão, etc.).\n",
        " - Identificar valores ausentes.\n",
        " - Visualizar a distribuição das variáveis.\n",
        "\n",
        "# **Limpeza dos Dados:**\n",
        " - Remover colunas desnecessárias (que não contribuem para a previsão do preço).\n",
        " - Tratar valores ausentes (preencher com valores adequados).\n",
        " - Tratar outliers (valores muito discrepantes que podem prejudicar o modelo)."
      ],
      "metadata": {
        "id": "AA1Z7qz6-Gd4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Removendo colunas desnecessárias que não contribuem para a previsão do preço do veículo.\n",
        "\n"
      ],
      "metadata": {
        "id": "gL3rZTWO-rtt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Removendo colunas desnecessárias\n",
        "# Colunas que não contribuem para a previsão do preço do veículo\n",
        "#\n",
        "# Explicação:\n",
        "# - Essas colunas contêm informações que não são muito relevantes para prever o preço do veículo\n",
        "#   (como datas de coleta, nomes, etc.).\n",
        "# - Remover essas colunas ajuda a simplificar o modelo e evitar overfitting (quando o modelo\n",
        "#   se ajusta demais aos dados de treinamento e não generaliza bem para novos dados).\n",
        "columns_to_drop = [\n",
        "    'dateCrawled', 'name', 'seller', 'offerType', 'dateCreated',\n",
        "    'nrOfPictures', 'postalCode', 'lastSeen', 'monthOfRegistration'\n",
        "]"
      ],
      "metadata": {
        "id": "Cap8nEOu-YtL"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.drop(): Função do pandas para remover colunas de um DataFrame.\n",
        "# - columns=columns_to_drop: Especifica a lista de colunas a serem removidas.\n",
        "# - errors='ignore': Ignora erros se alguma das colunas não existir no DataFrame.\n",
        "df = df.drop(columns=columns_to_drop, errors='ignore')  # Remove as colunas, ignorando erros se não existirem"
      ],
      "metadata": {
        "id": "4tV6Rd4s-mcl"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Análise descritiva\n",
        "# Exibe estatísticas descritivas das colunas numéricas."
      ],
      "metadata": {
        "id": "Di4MyWw3-wpi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.describe(): Função do pandas para calcular estatísticas descritivas das colunas numéricas\n",
        "#   do DataFrame.\n",
        "# - As estatísticas incluem: contagem, média, desvio padrão, mínimo, máximo e quartis.\n",
        "# - Essas estatísticas ajudam a entender a distribuição dos dados e identificar possíveis\n",
        "#   problemas (como outliers).\n",
        "print(df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dLFYMoa_Cwe",
        "outputId": "06d16020-b451-4686-d785-e65470260581"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              price  yearOfRegistration        powerPS      kilometer\n",
            "count  3.715280e+05       371528.000000  371528.000000  371528.000000\n",
            "mean   1.729514e+04         2004.577997     115.549477  125618.688228\n",
            "std    3.587954e+06           92.866598     192.139578   40112.337051\n",
            "min    0.000000e+00         1000.000000       0.000000    5000.000000\n",
            "25%    1.150000e+03         1999.000000      70.000000  125000.000000\n",
            "50%    2.950000e+03         2003.000000     105.000000  150000.000000\n",
            "75%    7.200000e+03         2008.000000     150.000000  150000.000000\n",
            "max    2.147484e+09         9999.000000   20000.000000  150000.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tratamento de outliers na variável 'price' substituindo valores de preço muito baixos ou muito altos pela mediana."
      ],
      "metadata": {
        "id": "iyqd4cqY_IdR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Outliers são valores muito discrepantes que podem prejudicar o desempenho do modelo.\n",
        "# - Neste caso, consideramos outliers os preços abaixo de 100 e acima de 350000.\n",
        "# - A mediana é uma medida de tendência central robusta a outliers (ao contrário da média).\n",
        "median_price = df['price'].median()  # Calcula a mediana dos preços"
      ],
      "metadata": {
        "id": "TmeleJWW_Hwx"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.loc[]: Função do pandas para selecionar linhas e colunas com base em rótulos ou\n",
        "#   condições.\n",
        "# - df['price'] < 100: Condição para selecionar as linhas onde o preço é menor que 100.\n",
        "# - 'price': Nome da coluna a ser modificada.\n",
        "# - median_price: Valor a ser atribuído às linhas selecionadas.\n",
        "df.loc[df['price'] < 100, 'price'] = median_price  # Substitui preços abaixo de 100 pela mediana\n",
        "df.loc[df['price'] > 350000, 'price'] = median_price  # Substitui preços acima de 350000 pela mediana"
      ],
      "metadata": {
        "id": "zyQSJtsb_TTi"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tratamento de valores ausentes, preenchendo valores ausentes em colunas categóricas com a moda e em colunas numéricas com a mediana."
      ],
      "metadata": {
        "id": "ZpHKp3FP_XPT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Valores ausentes são dados que faltam em algumas linhas do DataFrame.\n",
        "# - É importante tratar valores ausentes para evitar erros no modelo.\n",
        "# - A moda é o valor mais frequente em uma coluna.\n",
        "# - A mediana é o valor central em uma coluna (divide os dados em duas metades iguais).\n",
        "# - df.columns: Atributo do pandas que retorna os nomes das colunas do DataFrame.\n",
        "# - for column in df.columns:: Loop que itera sobre cada coluna do DataFrame.\n",
        "# - df[column].dtype: Atributo do pandas que retorna o tipo de dado da coluna.\n",
        "# - df[column].dtype == 'object': Condição que verifica se a coluna é do tipo 'object'\n",
        "#   (categórica).\n",
        "# - df[column].fillna(): Função do pandas para preencher valores ausentes em uma coluna.\n",
        "# - df[column].mode()[0]: Calcula a moda da coluna e retorna o primeiro valor (caso haja\n",
        "#   múltiplas modas).\n",
        "# - df[column].median(): Calcula a mediana da coluna.\n",
        "for column in df.columns:  # Itera sobre cada coluna do DataFrame\n",
        "    if df[column].dtype == 'object':  # Se a coluna for do tipo 'object' (categórica)\n",
        "        df[column] = df[column].fillna(df[column].mode()[0])  # Preenche com a moda\n",
        "    else:  # Se a coluna for numérica\n",
        "        df[column] = df[column].fillna(df[column].median())  # Preenche com a mediana"
      ],
      "metadata": {
        "id": "SyxKizhD_dU1"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Convertendo variáveis categóricas em numéricas usando Label Encoding,transformando colunas categóricas em representações numéricas."
      ],
      "metadata": {
        "id": "WYDURBr6_ybf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Modelos de Machine Learning geralmente funcionam melhor com dados numéricos.\n",
        "# - Label Encoding é uma técnica para transformar variáveis categóricas em números.\n",
        "# - Cada categoria é atribuída a um número inteiro único.\n",
        "# - [col for col in df.columns if df[col].dtype == 'object']: List comprehension que cria uma\n",
        "#   lista com os nomes das colunas que são do tipo 'object' (categóricas).\n",
        "categorical_cols = [col for col in df.columns if df[col].dtype == 'object']  # Lista de colunas categóricas"
      ],
      "metadata": {
        "id": "IAdsaF1l__Am"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - LabelEncoder(): Classe do scikit-learn para realizar Label Encoding.\n",
        "# - le.fit_transform(): Método do LabelEncoder que ajusta o modelo aos dados e transforma as\n",
        "#   categorias em números.\n",
        "for column in categorical_cols:  # Itera sobre cada coluna categórica\n",
        "    le = LabelEncoder()  # Cria um objeto LabelEncoder\n",
        "    df[column] = le.fit_transform(df[column])  # Aplica o Label Encoding na coluna"
      ],
      "metadata": {
        "id": "AIX2CnCUACZS"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Verificando valores ausentes após o tratamento e imprimindo a quantidade de valores ausentes em cada coluna para verificar se o tratamento foi bem-sucedido."
      ],
      "metadata": {
        "id": "30VwsJReAHIN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.isnull().sum(): Calcula a soma dos valores ausentes em cada coluna do DataFrame.\n",
        "# - print(): Função para imprimir a saída no console.\n",
        "print(\"\\nValores ausentes após o tratamento:\")\n",
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Re9-Dn4APm2",
        "outputId": "80c21893-cc78-4049-f93e-4d5649790a33"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Valores ausentes após o tratamento:\n",
            "price                 0\n",
            "abtest                0\n",
            "vehicleType           0\n",
            "yearOfRegistration    0\n",
            "gearbox               0\n",
            "powerPS               0\n",
            "model                 0\n",
            "kilometer             0\n",
            "fuelType              0\n",
            "brand                 0\n",
            "notRepairedDamage     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  4. Engenharia de Features\n",
        "\n",
        "# **Objetivo:**\n",
        " Criar novas features a partir das existentes e preparar os dados para a modelagem.\n",
        "\n",
        "# **Engenharia de Features:**\n",
        " - Criar novas variáveis que podem ser úteis para o modelo.\n",
        " - Transformar variáveis existentes para melhorar o desempenho do modelo.\n",
        "\n",
        " **Neste caso, vamos criar a feature 'idade_veiculo' (idade do veículo) e padronizar as\n",
        " colunas numéricas.*"
      ],
      "metadata": {
        "id": "OQAhVCjrASGK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Criando a feature 'idade_veiculo' e calculando a idade do veículo subtraindo o ano de registro do ano atual.\n"
      ],
      "metadata": {
        "id": "JzHQK0nhAi72"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - datetime.now(): Função do módulo datetime para obter a data e hora atuais.\n",
        "# - datetime.now().year: Atributo para extrair o ano da data atual.\n",
        "current_year = datetime.now().year  # Obtém o ano atual"
      ],
      "metadata": {
        "id": "CcJCuSPlAqFQ"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df[\"idade_veiculo\"]: Cria uma nova coluna chamada 'idade_veiculo' no DataFrame.\n",
        "# - current_year - df[\"yearOfRegistration\"]: Subtrai o ano de registro do ano atual para\n",
        "#   calcular a idade do veículo.\n",
        "df[\"idade_veiculo\"] = current_year - df[\"yearOfRegistration\"]  # Calcula a idade do veículo"
      ],
      "metadata": {
        "id": "NtXuKfCBAr7f"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.drop(): Função do pandas para remover colunas de um DataFrame.\n",
        "# - \"yearOfRegistration\": Nome da coluna a ser removida.\n",
        "# - axis=1: Especifica que a coluna deve ser removida (axis=0 remove linhas).\n",
        "# - inplace=True: Modifica o DataFrame original (sem criar uma cópia).\n",
        "df.drop(\"yearOfRegistration\", axis=1, inplace=True)  # Remove a coluna 'yearOfRegistration'"
      ],
      "metadata": {
        "id": "k6K4_WVUAtvf"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualizando a distribuição da variável 'idade_veiculo' e criando um histograma para visualizar a distribuição da idade do veículo."
      ],
      "metadata": {
        "id": "ov4kG4YUAxd_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Explicação:\n",
        "# - plt.figure(): Função do matplotlib para criar uma nova figura (gráfico).\n",
        "# - figsize=(10, 6): Define o tamanho da figura (largura=12, altura=6).\n",
        "plt.figure(figsize=(12, 6))  # Tamanho mais largo para melhorar proporção\n",
        "\n",
        "# Filtrar idades maiores que 0 e limitar a visualização na faixa de 0 a 100 anos\n",
        "sns.histplot(data=df, x='idade_veiculo', kde=True, bins=30)  # Configurar o número de bins\n",
        "plt.title('Distribuição da Idade do Veículo', fontsize=16)  # Título com tamanho ajustado\n",
        "plt.xlabel('Idade do Veículo (em anos)', fontsize=14)  # Eixo X com rótulo claro\n",
        "plt.ylabel('Frequência', fontsize=14)  # Eixo Y com rótulo claro\n",
        "plt.xlim(0, 100)  # Definir limites no eixo X (idade de 0 a 100 anos)\n",
        "plt.tight_layout()  # Ajustar o layout para evitar cortes\n",
        "plt.show()  # Exibir o gráfico"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "uOfWoUnrA2dM",
        "outputId": "530930e8-28c7-4f96-9d9b-02ca8c0aa664"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Padronizando as colunas numéricas\n",
        "# Escala as colunas numéricas para que tenham média 0 e desvio padrão 1"
      ],
      "metadata": {
        "id": "qpjcm4SvA9Xj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Padronizar as colunas numéricas é importante para que o modelo não seja influenciado por\n",
        "#   diferenças de escala entre as variáveis.\n",
        "# - StandardScaler() escala as colunas para que tenham média 0 e desvio padrão 1.\n",
        "numerical_cols = ['powerPS', 'kilometer', 'idade_veiculo']  # Lista de colunas numéricas"
      ],
      "metadata": {
        "id": "l6NIGcC6BA_t"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - StandardScaler(): Classe do scikit-learn para padronizar os dados.\n",
        "# - scaler.fit_transform(): Método do StandardScaler que ajusta o modelo aos dados e\n",
        "#   transforma as colunas.\n",
        "scaler = StandardScaler()  # Cria um objeto StandardScaler\n",
        "df[numerical_cols] = scaler.fit_transform(df[numerical_cols])  # Aplica a padronização nas colunas"
      ],
      "metadata": {
        "id": "yt6FofKSBCcS"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# One-Hot Encoding para variáveis categóricas\n",
        "# Transforma colunas categóricas em representações numéricas usando One-Hot Encoding."
      ],
      "metadata": {
        "id": "pgD2VpI0BGHf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - One-Hot Encoding é uma técnica para transformar variáveis categóricas em números, criando\n",
        "#   uma coluna para cada categoria.\n",
        "# - Isso é importante porque modelos de Machine Learning geralmente funcionam melhor com dados\n",
        "#   numéricos.\n",
        "categorical_cols = ['abtest', 'vehicleType', 'gearbox', 'model', 'fuelType', 'brand', 'notRepairedDamage']  # Lista de colunas categóricas"
      ],
      "metadata": {
        "id": "bmmjEWd2BS8c"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - OneHotEncoder(): Classe do scikit-learn para realizar One-Hot Encoding.\n",
        "# - sparse_output=False: Especifica que a saída não deve ser esparsa (matriz densa).\n",
        "# - handle_unknown='ignore': Especifica que categorias desconhecidas devem ser ignoradas.\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')  # Cria um objeto OneHotEncoder"
      ],
      "metadata": {
        "id": "aOr3Q4bRBUsg"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - encoder.fit_transform(): Método do OneHotEncoder que ajusta o modelo aos dados e\n",
        "#   transforma as categorias em números.\n",
        "encoded_data = encoder.fit_transform(df[categorical_cols])  # Aplica o One-Hot Encoding"
      ],
      "metadata": {
        "id": "jUhpQWXHBW3d"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - pd.DataFrame(): Função do pandas para criar um DataFrame.\n",
        "# - encoded_data: Dados codificados pelo One-Hot Encoding.\n",
        "# - columns=encoder.get_feature_names_out(categorical_cols): Especifica os nomes das colunas\n",
        "#   do DataFrame (obtidos a partir do OneHotEncoder).\n",
        "encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_cols))  # Cria um DataFrame com os dados codificados"
      ],
      "metadata": {
        "id": "mh-Xolg1BZJ5"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - pd.concat(): Função do pandas para concatenar DataFrames.\n",
        "# - [df, encoded_df]: Lista de DataFrames a serem concatenados.\n",
        "# - axis=1: Especifica que a concatenação deve ser feita ao longo das colunas (horizontalmente).\n",
        "df = pd.concat([df, encoded_df], axis=1)  # Concatena os dados codificados com o DataFrame original"
      ],
      "metadata": {
        "id": "Tg2gMQ59BbOo"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - df.drop(): Função do pandas para remover colunas de um DataFrame.\n",
        "# - categorical_cols: Lista de colunas a serem removidas.\n",
        "# - axis=1: Especifica que as colunas devem ser removidas (axis=0 remove linhas).\n",
        "# - inplace=True: Modifica o DataFrame original (sem criar uma cópia).\n",
        "df.drop(columns=categorical_cols, inplace=True)  # Remove as colunas categóricas originais"
      ],
      "metadata": {
        "id": "fsDH9uqLBcrF"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Verificando o DataFrame final"
      ],
      "metadata": {
        "id": "CL_kOgyJBfSd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Imprime as primeiras linhas do DataFrame para verificar se as transformações foram aplicadas\n",
        "# corretamente\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TZuuidxiBi_n",
        "outputId": "933798dd-5e92-499c-a87d-0af5dac13ef8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   price   powerPS  kilometer  idade_veiculo  abtest_0  abtest_1  \\\n",
            "0    480 -0.601384   0.607827       0.124674       0.0       1.0   \n",
            "1  18300  0.387482  -0.015424      -0.069153       0.0       1.0   \n",
            "2   9800  0.246959  -0.015424       0.006224       0.0       1.0   \n",
            "3   1500 -0.211042   0.607827       0.038528       0.0       1.0   \n",
            "4   3600 -0.242269  -0.887975      -0.036849       0.0       1.0   \n",
            "\n",
            "   vehicleType_0  vehicleType_1  vehicleType_2  vehicleType_3  ...  brand_32  \\\n",
            "0            0.0            0.0            0.0            0.0  ...       0.0   \n",
            "1            0.0            0.0            0.0            1.0  ...       0.0   \n",
            "2            0.0            0.0            0.0            0.0  ...       0.0   \n",
            "3            0.0            0.0            0.0            0.0  ...       0.0   \n",
            "4            0.0            0.0            0.0            0.0  ...       0.0   \n",
            "\n",
            "   brand_33  brand_34  brand_35  brand_36  brand_37  brand_38  brand_39  \\\n",
            "0       0.0       0.0       0.0       0.0       0.0       1.0       0.0   \n",
            "1       0.0       0.0       0.0       0.0       0.0       0.0       0.0   \n",
            "2       0.0       0.0       0.0       0.0       0.0       0.0       0.0   \n",
            "3       0.0       0.0       0.0       0.0       0.0       1.0       0.0   \n",
            "4       0.0       0.0       0.0       0.0       0.0       0.0       0.0   \n",
            "\n",
            "   notRepairedDamage_0  notRepairedDamage_1  \n",
            "0                  0.0                  1.0  \n",
            "1                  1.0                  0.0  \n",
            "2                  0.0                  1.0  \n",
            "3                  0.0                  1.0  \n",
            "4                  0.0                  1.0  \n",
            "\n",
            "[5 rows x 316 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5. Modelagem com Random Forest\n",
        "\n",
        "# **Objetivo:**\n",
        " Treinar o modelo Random Forest para regressão e otimizar os hiperparâmetros utilizando\n",
        " GridSearchCV.\n",
        "\n",
        "# **Random Forest:**\n",
        " - Algoritmo de aprendizado de máquina que combina várias árvores de decisão para fazer\n",
        "   previsões mais precisas e robustas.\n",
        " - É um algoritmo versátil que pode ser usado para regressão e classificação.\n",
        "#\n",
        "# **GridSearchCV:**\n",
        " - Técnica para encontrar os melhores hiperparâmetros para um modelo de Machine Learning.\n",
        " - Testa várias combinações de hiperparâmetros e avalia o desempenho do modelo para cada\n",
        "   combinação.\n",
        " - Retorna os hiperparâmetros que resultaram no melhor desempenho."
      ],
      "metadata": {
        "id": "EZt-kTCKB2Rr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Separando features e target dividindo o DataFrame em features (X) e target (y)"
      ],
      "metadata": {
        "id": "lFhV9OvWB-Ps"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - X: Variáveis independentes (usadas para prever o preço).\n",
        "# - y: Variável dependente (o preço, que queremos prever).\n",
        "X = df.drop('price', axis=1)  # Features (todas as colunas exceto 'price')\n",
        "y = df['price']  # Target (coluna 'price')"
      ],
      "metadata": {
        "id": "zyi175b6CCgy"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# Dividindo os dados em conjuntos de treino e teste para avaliar o desempenho do modelo"
      ],
      "metadata": {
        "id": "x2ZeVK9dCEp3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Conjunto de treinamento: Usado para treinar o modelo (ajustar os parâmetros).\n",
        "# - Conjunto de teste: Usado para avaliar o desempenho do modelo em dados não vistos.\n",
        "# - test_size=0.2: Especifica que 20% dos dados serão usados para teste.\n",
        "# - random_state=42: Garante que a divisão seja sempre a mesma (reproduzível).\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Divide os dados em 80% para treinamento e 20% para teste"
      ],
      "metadata": {
        "id": "4VcmbLphCPH0"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Definindo os hiperparâmetros para otimização\n",
        "# Definindo um grid de hiperparâmetros para serem testados pelo GridSearchCV"
      ],
      "metadata": {
        "id": "OEXhr5E_CSLR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - Hiperparâmetros são parâmetros que controlam o comportamento do modelo (não são aprendidos\n",
        "#   durante o treinamento).\n",
        "# - O GridSearchCV testa várias combinações de hiperparâmetros para encontrar a melhor.\n",
        "# - n_estimators: Número de árvores na floresta.\n",
        "# - max_depth: Profundidade máxima das árvores.\n",
        "# - min_samples_split: Número mínimo de amostras para dividir um nó.\n",
        "# - min_samples_leaf: Número mínimo de amostras em um nó folha.\n",
        "param_grid = {\n",
        "    'n_estimators': [30, 60],  # Número de árvores na floresta\n",
        "    'max_depth': [2, 6],  # Profundidade máxima das árvores\n",
        "    'min_samples_split': [3],  # Número mínimo de amostras para dividir um nó\n",
        "    'min_samples_leaf': [2]  # Número mínimo de amostras em um nó folha\n",
        "}"
      ],
      "metadata": {
        "id": "6mpqXarVCWwP"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Inicializando o GridSearchCV\n",
        "# Criando um objeto GridSearchCV para encontrar os melhores hiperparâmetros"
      ],
      "metadata": {
        "id": "3eD4dDE0CcXM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - GridSearchCV(): Classe do scikit-learn para realizar a busca por hiperparâmetros.\n",
        "# - estimator=RandomForestRegressor(random_state=42): Especifica o modelo a ser utilizado\n",
        "#   (Random Forest).\n",
        "# - param_grid=param_grid: Especifica o grid de hiperparâmetros a serem testados.\n",
        "# - cv=3: Especifica o número de folds na validação cruzada (3 folds).\n",
        "# - scoring='neg_mean_absolute_error': Especifica a métrica de avaliação a ser utilizada\n",
        "#   (MAE negativo).\n",
        "# - n_jobs=-1: Utiliza todos os núcleos da CPU para acelerar o processo.\n",
        "# - verbose=2: Exibe informações detalhadas durante o treinamento.\n",
        "grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42),  # Modelo Random Forest\n",
        "                           param_grid=param_grid,  # Grid de hiperparâmetros\n",
        "                           cv=2,  # Validação cruzada com 3 folds\n",
        "                           scoring='neg_mean_absolute_error',  # Métrica de avaliação\n",
        "                           n_jobs=-1,  # Utiliza todos os núcleos da CPU\n",
        "                           verbose=2)  # Exibe informações detalhadas durante o treinamento"
      ],
      "metadata": {
        "id": "RdKuwpKgCfNb"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Executando o GridSearchCV para encontrar os melhores hiperparâmetros"
      ],
      "metadata": {
        "id": "IyopydETCh9p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - grid_search.fit(): Método do GridSearchCV para ajustar o modelo aos dados de treinamento.\n",
        "grid_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "gUD265HjCkjY",
        "outputId": "cabfc6b9-0b6a-483e-a249-19760ca51f5d"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 2 folds for each of 4 candidates, totalling 8 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=2, estimator=RandomForestRegressor(random_state=42), n_jobs=-1,\n",
              "             param_grid={'max_depth': [2, 6], 'min_samples_leaf': [2],\n",
              "                         'min_samples_split': [3], 'n_estimators': [30, 60]},\n",
              "             scoring='neg_mean_absolute_error', verbose=2)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=RandomForestRegressor(random_state=42), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [2, 6], &#x27;min_samples_leaf&#x27;: [2],\n",
              "                         &#x27;min_samples_split&#x27;: [3], &#x27;n_estimators&#x27;: [30, 60]},\n",
              "             scoring=&#x27;neg_mean_absolute_error&#x27;, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=2, estimator=RandomForestRegressor(random_state=42), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [2, 6], &#x27;min_samples_leaf&#x27;: [2],\n",
              "                         &#x27;min_samples_split&#x27;: [3], &#x27;n_estimators&#x27;: [30, 60]},\n",
              "             scoring=&#x27;neg_mean_absolute_error&#x27;, verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestRegressor</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=6, min_samples_leaf=2, min_samples_split=3,\n",
              "                      n_estimators=60, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=6, min_samples_leaf=2, min_samples_split=3,\n",
              "                      n_estimators=60, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exibindo os melhores hiperparâmetros encontrados pelo GridSearchCV"
      ],
      "metadata": {
        "id": "_BTIQFN6Cn9B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - grid_search.best_params_: Atributo do GridSearchCV que retorna os melhores\n",
        "#   hiperparâmetros encontrados.\n",
        "print(\"\\nMelhores parâmetros encontrados:\")\n",
        "print(grid_search.best_params_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "herUfMvhCryB",
        "outputId": "28122197-cdfa-41d3-919f-29c474d2c49f"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Melhores parâmetros encontrados:\n",
            "{'max_depth': 6, 'min_samples_leaf': 2, 'min_samples_split': 3, 'n_estimators': 60}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  6. Avaliação do Modelo\n",
        "\n",
        "# **Objetivo:**\n",
        " Avaliar o desempenho do modelo utilizando o conjunto de teste e calcular o MAE.\n",
        "\n",
        "# **Avaliação do Modelo:**\n",
        " - Utilizar o conjunto de teste para avaliar o desempenho do modelo em dados não vistos.\n",
        " - Calcular o MAE para quantificar o erro médio das previsões."
      ],
      "metadata": {
        "id": "WDbBqnzaCvLK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Fazendo previsões com o modelo otimizado e utilizando o modelo treinado para fazer previsões no conjunto de teste"
      ],
      "metadata": {
        "id": "plBVbYYLC0sq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - grid_search.predict(): Método do GridSearchCV para fazer previsões com o modelo treinado.\n",
        "# - X_test: Dados de teste a serem utilizados para fazer as previsões.\n",
        "y_pred = grid_search.predict(X_test)"
      ],
      "metadata": {
        "id": "iWrSIWQBC4HU"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# Calculando o Mean Absolute Error (MAE) para avaliar o desempenho do modelo"
      ],
      "metadata": {
        "id": "E_fg9JtIC5pk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - mean_absolute_error(): Função do scikit-learn para calcular o MAE.\n",
        "# - y_test: Valores reais do preço no conjunto de teste.\n",
        "# - y_pred: Valores previstos pelo modelo no conjunto de teste.\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "print(\"\\nMAE no conjunto de teste:\", mae)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6yqHj0GC_69",
        "outputId": "a369347e-7156-4591-fa0d-19fa740f97ca"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "MAE no conjunto de teste: 2207.702668805555\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  7. Conclusão\n",
        "\n",
        "# **Objetivo:**\n",
        " Apresentar as conclusões do projeto e discutir os próximos passos.\n",
        "\n",
        "# **Conclusão:**\n",
        " - O modelo Random Forest foi treinado e otimizado com sucesso para prever o preço de veículos.\n",
        " - O MAE no conjunto de teste indica o quão bem o modelo está performando.\n",
        "\n",
        "\n",
        "Conclusão do Projeto\n",
        "O objetivo deste projeto foi construir um modelo preditivo de Machine Learning utilizando Random Forest para prever o preço de veículos usados com base em suas especificações, características e estado de conservação. A partir de um pipeline estruturado que incluiu etapas de análise de dados, pré-processamento, engenharia de features, modelagem e avaliação do modelo, diversas informações valiosas foram extraídas e analisadas para gerar um modelo robusto e eficiente.\n",
        "\n",
        "A utilização do Random Forest, um algoritmo amplamente reconhecido por sua capacidade de capturar padrões complexos em dados, forneceu um modelo robusto para o problema de previsão de preço de veículos.\n",
        "\n",
        "# **Próximos Passos:**\n",
        " - Analisar a importância das features para entender quais variáveis têm maior impacto na\n",
        "   previsão do preço.\n",
        " - Coletar mais dados e refinar o modelo para melhorar a precisão das previsões.\n",
        " - Implementar o modelo em um sistema de previsão em tempo real."
      ],
      "metadata": {
        "id": "Nf-is5WhDICi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Analisando a importância das features\n",
        "# Calculando e visualizando a importância de cada feature para o modelo"
      ],
      "metadata": {
        "id": "Ur9Gb_REDRIk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Explicação:\n",
        "# - A importância das features indica quais variáveis têm maior impacto na previsão do preço.\n",
        "# - Isso pode ajudar a entender o que o modelo está aprendendo e a identificar quais variáveis\n",
        "#   são mais relevantes.\n",
        "# - grid_search.best_estimator_.feature_importances_: Atributo do GridSearchCV que retorna a\n",
        "#   importância das features.\n",
        "importances = grid_search.best_estimator_.feature_importances_  # Obtém a importância das features\n",
        "feature_names = X.columns  # Obtém os nomes das features\n",
        "\n",
        "# Criando um DataFrame para organizar as importâncias\n",
        "importance_df = pd.DataFrame({\n",
        "    'Features': feature_names,\n",
        "    'Importance': importances\n",
        "})\n",
        "\n",
        "# Ordenando as features pela importância em ordem decrescente\n",
        "importance_df = importance_df.sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Exibindo apenas as 15 principais features (ou ajuste conforme necessário)\n",
        "top_n = 15\n",
        "top_features = importance_df.head(top_n)\n",
        "\n",
        "# Gráfico das features mais importantes\n",
        "plt.figure(figsize=(10, 6))  # Tamanho do gráfico\n",
        "sns.barplot(data=top_features, x='Importance', y='Features', palette=\"viridis\")  # Gráfico horizontal para melhor visualização\n",
        "plt.title('Top 15 Features Mais Importantes', fontsize=16)  # Título do gráfico\n",
        "plt.xlabel('Importância', fontsize=14)  # Rótulo do eixo X\n",
        "plt.ylabel('Features', fontsize=14)  # Rótulo do eixo Y\n",
        "plt.tight_layout()  # Ajustar o layout automaticamente\n",
        "plt.show()  # Exibir o gráfico"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 714
        },
        "id": "3bkgeNEd7mqs",
        "outputId": "f2480d5b-a44d-4688-e8dc-bd954ae7670d"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-55-5236c393d387>:25: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=top_features, x='Importance', y='Features', palette=\"viridis\")  # Gráfico horizontal para melhor visualização\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Conclusao Final\n",
        "Ao longo deste projeto, foi desenvolvido um pipeline de Machine Learning completo, que desde a coleta e preparação dos dados até a análise de resultados, demonstrou desempenhar bem o objetivo proposto. O Random Forest provou ser uma escolha robusta, fornecendo previsões precisas sobre os preços de veículos usados e identificando claramente os principais fatores que explicam essa variabilidade.\n",
        "\n",
        "Esse trabalho não só atendeu aos objetivos acadêmicos, mas também mostrou seu potencial de aplicação prática no mercado automotivo, proporcionando uma solução confiável e eficiente para prever preços de veículos e usar informações valiosas para tomada de decisão. O projeto pode ser expandido e aprimorado no futuro para aumentar ainda mais sua aplicabilidade e precisão!"
      ],
      "metadata": {
        "id": "xOXqRdl-lNWM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Caio Santiago de Oliveira RM 559788"
      ],
      "metadata": {
        "id": "C06TCBnhG4v-"
      }
    }
  ]
}